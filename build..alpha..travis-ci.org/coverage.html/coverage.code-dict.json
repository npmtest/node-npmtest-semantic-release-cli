{"/home/travis/build/npmtest/node-npmtest-semantic-release-cli/test.js":"/* istanbul instrument in package npmtest_semantic_release_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-release-cli/lib.npmtest_semantic_release_cli.js":"/* istanbul instrument in package npmtest_semantic_release_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_semantic_release_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_semantic_release_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-release-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-semantic-release-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_semantic_release_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_semantic_release_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_semantic_release_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_semantic_release_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_semantic_release_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_semantic_release_cli.__dirname + '/lib.npmtest_semantic_release_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-release-cli/node_modules/semantic-release-cli/dist/index.js":"'use strict';\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar _require = require('fs');\n\nconst readFileSync = _require.readFileSync,\n      writeFileSync = _require.writeFileSync;\n\n\nconst _ = require('lodash');\n\nvar _require2 = require('bluebird');\n\nconst promisify = _require2.promisify;\n\nconst nopt = require('nopt');\nconst npm = require('npm');\nconst request = require('request-promise').defaults({ json: true });\n\nconst getLog = require('./lib/log');\n\nconst ownPkg = require('../package.json');\nlet pkg = JSON.parse(readFileSync('./package.json'));\n\nrequire('update-notifier')({\n  pkg: _.defaults(ownPkg, { version: '0.0.0' })\n}).notify();\n\nconst knownOptions = {\n  tag: String,\n  version: Boolean,\n  help: Boolean,\n  keychain: Boolean,\n  'ask-for-passwords': Boolean,\n  'gh-token': String,\n  'npm-token': String\n};\n\nconst shortHands = {\n  v: ['--version'],\n  h: ['--help']\n};\n\nmodule.exports = (() => {\n  var _ref = _asyncToGenerator(function* (argv) {\n    let info = {\n      options: _.defaults(nopt(knownOptions, shortHands, argv, 2), {\n        keychain: true,\n        tag: 'latest'\n      })\n    };\n\n    if (info.options.version) {\n      console.log(ownPkg.version || 'development');\n      process.exit(0);\n    }\n\n    if (info.options.argv.remain[0] !== 'setup' && info.options.argv.remain[0] !== 'init' || info.options.help) {\n      console.log(`\nsemantic-release-cli\n\nUsage:\n  semantic-release-cli setup [--tag=<String>]\n\nOptions:\n  -h --help            Show this screen.\n  -v --version         Show version.\n  --[no-]keychain      Use keychain to get passwords [default: true].\n  --ask-for-passwords  Ask for the passwords even if passwords are stored [default: false].\n  --tag=<String>       npm tag to install [default: 'latest'].\n  --gh-token=<String>  Github auth token\n  --npm-token=<String> NPM auth token\n\nAliases:\n  init                 setup`);\n      process.exit(0);\n    }\n\n    try {\n      var config = (yield promisify(npm.load.bind(npm))({ progress: false })).config;\n    } catch (e) {\n      console.log('Failed to load npm config.', e);\n      process.exit(1);\n    }\n\n    info.loglevel = config.get('loglevel') || 'warn';\n    const log = info.log = getLog(info.loglevel);\n\n    try {\n      yield require('./lib/repository')(pkg, info);\n      yield require('./lib/npm')(pkg, info);\n      yield require('./lib/github')(pkg, info);\n      yield require('./lib/ci')(pkg, info);\n    } catch (err) {\n      log.error(err);\n      process.exit(1);\n    }\n\n    pkg.version = '0.0.0-development';\n\n    pkg.scripts = pkg.scripts || {};\n    pkg.scripts['semantic-release'] = 'semantic-release pre && npm publish && semantic-release post';\n\n    pkg.repository = pkg.repository || {\n      type: 'git',\n      url: info.giturl\n    };\n\n    if (info.ghrepo.private && !pkg.publishConfig) {\n      pkg.publishConfig = { access: 'restricted' };\n    }\n\n    try {\n      var _ref2 = yield request('https://registry.npmjs.org/semantic-release');\n\n      const distTags = _ref2['dist-tags'];\n\n      pkg.devDependencies = pkg.devDependencies || {};\n      pkg.devDependencies['semantic-release'] = `^${ distTags[info.options.tag] }`;\n    } catch (e) {\n      log.error('Could not get latest `semantic-release` version.', e);\n    }\n\n    log.verbose('Writing `package.json`.');\n    writeFileSync('package.json', `${ JSON.stringify(pkg, null, 2) }\\n`);\n    log.info('Done.');\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n})();","/home/travis/build/npmtest/node-npmtest-semantic-release-cli/node_modules/semantic-release-cli/dist/lib/log.js":"'use strict';\n\nconst log = require('npmlog');\n\nmodule.exports = function (level) {\n  log.level = level;['silly', 'verbose', 'info', 'http', 'warn', 'error'].forEach(level => {\n    log[level] = log[level].bind(log, 'semantic-release');\n  });\n\n  return log;\n};","/home/travis/build/npmtest/node-npmtest-semantic-release-cli/node_modules/semantic-release-cli/bin/semantic-release.js":"#!/usr/bin/env node\n\n/* istanbul ignore next */\ntry {\n  require('../dist')(process.argv)\n} catch (err) {\n  if (err.code === 'MODULE_NOT_FOUND') {\n    require('babel-register')\n    require('../src')(process.argv)\n  } else {\n    console.log(err)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-semantic-release-cli/node_modules/semantic-release-cli/dist/lib/repository.js":"'use strict';\n\nlet getRemoteUrl = (() => {\n  var _ref = _asyncToGenerator(function* (_ref2) {\n    let repository = _ref2.repository;\n\n    if (!repository || !repository.url) {\n      const gitConfig = ini.decode(readFileSync('./.git/config', 'utf8'));\n      const repo = gitConfig['remote \"origin\"'].url;\n      if (!repo) throw new Error('No repository found.');\n      repository = { type: 'git', url: `${ ghUrl(repo) }.git` };\n    }\n\n    let parsed = url.parse(repository.url);\n    parsed.auth = null;\n    parsed.protocol = 'https';\n    repository.url = url.format(parsed);\n\n    return repository.url;\n  });\n\n  return function getRemoteUrl(_x) {\n    return _ref.apply(this, arguments);\n  };\n})();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar _require = require('fs');\n\nconst readFileSync = _require.readFileSync;\n\nconst url = require('url');\n\nconst _ = require('lodash');\nconst ghUrl = require('github-url-from-git');\nconst ini = require('ini');\nconst inquirer = require('inquirer');\nconst parseGhUrl = require('parse-github-repo-url');\nconst request = require('request-promise').defaults({ resolveWithFullResponse: true });\nconst validator = require('validator');\nconst log = require('npmlog');\n\nmodule.exports = (() => {\n  var _ref3 = _asyncToGenerator(function* (pkg, info) {\n    try {\n      var repoUrl = yield getRemoteUrl(pkg);\n    } catch (e) {\n      log.error('Could not get repository url. Please create/add the repository.');\n      throw e;\n    }\n\n    log.verbose(`Detected git url: ${ repoUrl }`);\n    info.giturl = repoUrl;\n    const parsedUrl = parseGhUrl(repoUrl);\n\n    if (!parsedUrl) {\n      log.info('Not a reqular GitHub URL.');\n      const eurl = url.parse(repoUrl);\n      delete eurl.pathname;\n      delete eurl.search;\n      delete eurl.query;\n      delete eurl.hash;\n\n      const answers = yield inquirer.prompt([{\n        type: 'confirm',\n        name: 'enterprise',\n        message: 'Are you using GitHub Enterprise?',\n        default: true\n      }, {\n        type: 'input',\n        name: 'url',\n        message: 'What is your GitHub Enterprise url?',\n        default: url.format(eurl),\n        when: _.bind(_.get, null, _, 'enterprise'),\n        validate: _.bind(validator.isURL, null, _, {\n          protocols: ['http', 'https'],\n          require_protocol: true\n        })\n      }]);\n      info.ghepurl = answers.url;\n      return;\n    }\n\n    info.ghrepo = { slug: parsedUrl };\n\n    try {\n      yield request.head(repoUrl);\n    } catch (e) {\n      const answers = yield inquirer.prompt([{\n        type: 'confirm',\n        name: 'private',\n        message: 'Is the GitHub repository private?',\n        default: false\n      }]);\n      _.assign(info.ghrepo, answers);\n      if (answers.private) return;\n      throw new Error('Could not access GitHub repository');\n    }\n  });\n\n  return function (_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n})();"}